class ErlangConfigParser::Parser
rule
  statement : list
            | map
            | tuple

  list      : LIST_BEGIN elements LIST_END   { result = val[1] }
            | LIST_BEGIN LIST_END            { result = [] }

  map       : MAP_BEGIN TUPLE_END               { result = {} }
            | MAP_BEGIN associations TUPLE_END  { result = val[1].inject({}) {|h,(k,v)| h[k]=v ; h} }
  
  associations : association                    { result = [ val[0] ]}
               | associations COMMA association { result << val[2] }

  association : element ARROW element        { result = [ val[0], val[2] ] }

  tuple     : TUPLE_BEGIN elements TUPLE_END { result = val[1] }
            | TUPLE_BEGIN TUPLE_END          { result = [] }

  elements  : element                        { result = [val[0]] }
            | elements COMMA element         { result << val[2]  }

  element   : list
            | map
            | tuple
            | ATOM                           { result = val[0].to_sym }
            | BIT_STRING                     { result = val[0] }
            | STRING                         { result = val[0] }
            | INTEGER                        { result = val[0].to_i }
            | FLOAT                          { result = val[0].to_f }
end

---- header
require "strscan"

---- inner

def parse(str)
  ss = StringScanner.new(str)
  @tokens = []

  until ss.eos?
    ss.scan(/<<"((?:[^"\\]|\\.)*)">>/)    ? @tokens << [:BIT_STRING,  ss[1]] :
    ss.scan(/"((?:[^"\\]|\\.)*)"/)        ? @tokens << [:STRING,      ss[1]] :
    ss.scan(/[+-]?\d+\.\d+(?:e[+-]\d+)?/) ? @tokens << [:FLOAT,       ss.matched] :
    ss.scan(/[+-]?\d+/)                   ? @tokens << [:INTEGER,     ss.matched] :
    ss.scan(/\[/)                         ? @tokens << [:LIST_BEGIN,  ss.matched] :
    ss.scan(/\]/)                         ? @tokens << [:LIST_END,    ss.matched] :
    ss.scan(/\#{/)                        ? @tokens << [:MAP_BEGIN,   ss.matched] :
    ss.scan(/{/)                          ? @tokens << [:TUPLE_BEGIN, ss.matched] :
    ss.scan(/}/)                          ? @tokens << [:TUPLE_END,   ss.matched] :
    ss.scan(/=>/)                         ? @tokens << [:ARROW,       ss.matched] :
    ss.scan(/'((?:[^'\\]|\\.)*)'/)        ? @tokens << [:ATOM,        ss[1]] :
    ss.scan(/[a-z][\w@]*/)                ? @tokens << [:ATOM,        ss.matched] :
    ss.scan(/,/)                          ? @tokens << [:COMMA,       ss.matched] :
    ss.scan(/\s/)                         ? nil :
    ss.scan(/\./)                         ? break :
    (raise "scanner error at '%s'" % ss.peek(20))
  end

  do_parse
end

def next_token
  @tokens.shift
end
